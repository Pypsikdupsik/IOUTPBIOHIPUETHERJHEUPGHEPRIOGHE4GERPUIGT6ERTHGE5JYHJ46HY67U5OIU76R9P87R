document.addEventListener('DOMContentLoaded', function() {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    function formatWeddingDate(date) {
        const options = {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        };
        return date.toLocaleDateString('ru-RU', options);
    }

    // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
    const dateElement = document.querySelector('.date');
    let weddingDate = new Date('September 28, 2025 16:00');

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    function updateWeddingDate() {
        const now = new Date();

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Å–≤–∞–¥—å–±—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
        if (now > weddingDate) {
            weddingDate = new Date(weddingDate);
            weddingDate.setFullYear(now.getFullYear() + 1);
        }

        dateElement.textContent = formatWeddingDate(weddingDate);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–∞—Ç—ã
    updateWeddingDate();
    setInterval(updateWeddingDate, 1000);

    // –¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
    function updateCountdown() {
        const now = new Date();
        let distance = weddingDate - now;

        // –ï—Å–ª–∏ —Å–≤–∞–¥—å–±–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Å—á–∏—Ç–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
        if (distance < 0) {
            const nextYearWedding = new Date(weddingDate);
            nextYearWedding.setFullYear(now.getFullYear() + 1);
            distance = nextYearWedding - now;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById('days').textContent = days.toString().padStart(2, '0');
        document.getElementById('hours').textContent = hours.toString().padStart(2, '0');
        document.getElementById('minutes').textContent = minutes.toString().padStart(2, '0');
        document.getElementById('seconds').textContent = seconds.toString().padStart(2, '0');
    }

    updateCountdown();
    const countdownTimer = setInterval(updateCountdown, 1000);

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    document.getElementById('scrollDown').addEventListener('click', function() {
        window.scrollBy({
            top: window.innerHeight - 100,
            behavior: 'smooth'
        });
    });

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞—Ä—Ç–æ–π
    const mapModal = document.getElementById('mapModal');
    const openMapBtn = document.getElementById('openMapBtn');
    const closeModal = document.getElementById('closeModal');

    openMapBtn.addEventListener('click', function() {
        mapModal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    });

    closeModal.addEventListener('click', function() {
        mapModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', function(event) {
        if (event.target === mapModal) {
            mapModal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }
    });

    // –ö–∞—Ä—É—Å–µ–ª—å
    const carousel = document.getElementById('carousel');
    const carouselInner = document.getElementById('carouselInner');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const indicators = document.getElementById('indicators').children;

    let currentIndex = 0;
    const items = document.querySelectorAll('.carousel-item');
    const totalItems = items.length;

    function updateCarousel() {
        carouselInner.style.transform = `translateX(-${currentIndex * 100}%)`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for (let i = 0; i < indicators.length; i++) {
            indicators[i].classList.remove('active');
            if (i === currentIndex) {
                indicators[i].classList.add('active');
            }
        }
    }

    prevBtn.addEventListener('click', function() {
        currentIndex = (currentIndex - 1 + totalItems) % totalItems;
        updateCarousel();
    });

    nextBtn.addEventListener('click', function() {
        currentIndex = (currentIndex + 1) % totalItems;
        updateCarousel();
    });

    // –ö–ª–∏–∫ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
    for (let i = 0; i < indicators.length; i++) {
        indicators[i].addEventListener('click', function() {
            currentIndex = parseInt(this.getAttribute('data-index'));
            updateCarousel();
        });
    }

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏
    let carouselInterval = setInterval(function() {
        currentIndex = (currentIndex + 1) % totalItems;
        updateCarousel();
    }, 5000);

    carousel.addEventListener('mouseenter', function() {
        clearInterval(carouselInterval);
    });

    carousel.addEventListener('mouseleave', function() {
        carouselInterval = setInterval(function() {
            currentIndex = (currentIndex + 1) % totalItems;
            updateCarousel();
        }, 5000);
    });

    // –§–æ—Ä–º–∞ RSVP
    const rsvpForm = document.getElementById('rsvpForm');

    rsvpForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const name = document.getElementById('name').value;
        const attending = document.getElementById('attending').value;

        if (attending === 'yes') {
            alert(`–°–ø–∞—Å–∏–±–æ, ${name}! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å –Ω–∞–º–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å!`);
        } else {
            alert(`–°–ø–∞—Å–∏–±–æ, ${name}, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –Ω–∞–º. –ë—É–¥–µ–º —Å–∫—É—á–∞—Ç—å!`);
        }

        rsvpForm.reset();
    });

    // –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
    const privacyNotice = document.getElementById('privacyNotice');
    const acceptPrivacy = document.getElementById('acceptPrivacy');

    if (!localStorage.getItem('privacyAccepted')) {
        privacyNotice.style.display = 'flex';
    }

    acceptPrivacy.addEventListener('click', function() {
        localStorage.setItem('privacyAccepted', 'true');
        privacyNotice.style.display = 'none';
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    const animateOnScroll = function() {
        const elements = document.querySelectorAll('.detail-card, .section-title, .gallery-item');

        elements.forEach(element => {
            const elementPosition = element.getBoundingClientRect().top;
            const screenPosition = window.innerHeight / 1.3;

            if (elementPosition < screenPosition) {
                element.style.opacity = '1';
                element.style.transform = 'translateY(0)';
            }
        });
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    window.addEventListener('load', function() {
        const elements = document.querySelectorAll('.detail-card, .section-title, .gallery-item');

        elements.forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            element.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
        });

        setTimeout(() => {
            animateOnScroll();
        }, 500);
    });

    window.addEventListener('scroll', animateOnScroll);

    // –ü–∞—Ä–∞–ª–ª–∞–∫—Å —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≥–µ—Ä–æ—è
    window.addEventListener('scroll', function() {
        const scrollPosition = window.pageYOffset;
        const hero = document.querySelector('.hero');

        hero.style.backgroundPositionY = scrollPosition * 0.5 + 'px';
    });
});
        const BOT_TOKEN = "7274111004:AAG80AoBOzzUFlHfbaBe50e7yOGzUCLl6cc";
const CHAT_ID = "5168984360";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async function sendToTelegram(formData) {
    const message = `üìã –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n` +
                   `üë§ –ò–º—è: ${formData.name}\n` +
                   `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                   `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${formData.guests}\n` +
                   `‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: ${formData.attending === 'yes' ? '–ü—Ä–∏–¥—É' : '–ù–µ —Å–º–æ–≥—É'}\n` +
                   `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n` +
                   `üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString()}`;

    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message
            })
        });

        const data = await response.json();
        console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", data);
        return data.ok;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
        return false;
    }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã RSVP
const rsvpForm = document.getElementById('rsvpForm');
const successMessage = document.createElement('div');
successMessage.className = 'success-message';
successMessage.textContent = '';
rsvpForm.appendChild(successMessage);

rsvpForm.addEventListener('submit', async function(e) {
    e.preventDefault();

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone')?.value || null,
        guests: document.getElementById('guests').value,
        attending: document.getElementById('attending').value,
        message: document.getElementById('message').value
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name || formData.name.length < 2) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const submitBtn = rsvpForm.querySelector('.submit-btn');
    const originalBtnText = submitBtn.textContent;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.disabled = true;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const isSent = await sendToTelegram(formData);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    submitBtn.textContent = originalBtnText;
    submitBtn.disabled = false;

    if (isSent) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        successMessage.style.display = 'block';
        rsvpForm.reset();

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            successMessage.style.display = 'none';
        }, 5000);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if (formData.attending === 'no') {
            alert(`–°–ø–∞—Å–∏–±–æ, ${formData.name}! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å –Ω–∞–º–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å!`);
        } else {
            alert(`–°–ø–∞—Å–∏–±–æ, ${formData.name}, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏ –Ω–∞–º. –ë—É–¥–µ–º —Å–∫—É—á–∞—Ç—å!`);
        }
    } else {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

});

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º—É (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
if (!document.getElementById('phone')) {
    const phoneGroup = document.createElement('div');
    phoneGroup.className = 'form-group';
    phoneGroup.innerHTML = `
        <label for="phone" class="form-label">–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
        <input type="tel" id="phone" class="form-input" placeholder="+7 (XXX) XXX-XX-XX">
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"
    const guestsGroup = document.querySelector('#guests').parentElement;
    guestsGroup.parentNode.insertBefore(phoneGroup, guestsGroup);
}